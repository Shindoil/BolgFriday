{"ast":null,"code":"var _jsxFileName = \"D:\\\\ai_chat\\\\react-workspace\\\\blogfriday\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// // import React, { useState, useEffect } from \"react\";\n// // import axios from \"axios\";\n// // import \"./App.css\";\n\n// // const App = () => {\n// //   const [orderInfo, setOrderInfo] = useState({\n// //     deliveryAddress: \"\",\n// //     recipient: \"\",\n// //     deliveryInstruction: \"\",\n// //     paymentMethodId: \"\",\n// //   });\n\n// //   const [products, setProducts] = useState([]);\n// //   const [paymentResult, setPaymentResult] = useState(\"\");\n\n// //   useEffect(() => {\n// //     const fetchProducts = async () => {\n// //       try {\n// //         const response = await axios.get(\n// //           `${process.env.REACT_APP_API_URL}/product`\n// //         );\n// //         setProducts(response.data);\n// //       } catch (error) {\n// //         console.error(\"상품 데이터를 불러오는 중 오류가 발생했습니다:\", error);\n// //       }\n// //     };\n\n// //     fetchProducts();\n// //   }, []);\n\n// //   const handleInputChange = (e) => {\n// //     const { name, value } = e.target;\n// //     setOrderInfo({ ...orderInfo, [name]: value });\n// //   };\n\n// //   const submitOrder = async () => {\n// //     const orderAmount = products.reduce(\n// //       (total, product) => total + product.productPrice * product.quantity,\n// //       0\n// //     );\n// //     try {\n// //       const response = await axios.post(\n// //         `${process.env.REACT_APP_API_URL}/orders`,\n// //         {\n// //           ...orderInfo,\n// //           products: products.map((product) => ({\n// //             productId: product.productId,\n// //             quantity: product.quantity,\n// //           })),\n// //           orderAmount,\n// //         }\n// //       );\n\n// //       if (response.status === 200) {\n// //         setPaymentResult(\"주문이 성공적으로 처리되었습니다.\");\n// //       }\n// //     } catch (error) {\n// //       console.error(\"주문 처리 중 오류가 발생했습니다.\", error);\n// //       setPaymentResult(\"주문 처리 중 오류가 발생했습니다.\");\n// //     }\n// //   };\n\n// //   return (\n// //     <div className=\"app\">\n// // <div className=\"order-form\">\n// //   <h2>주문 및 결제</h2>\n// //   <input\n// //     type=\"text\"\n// //     name=\"deliveryAddress\"\n// //     placeholder=\"배송지\"\n// //     onChange={handleInputChange}\n// //   />\n// //   <input\n// //     type=\"text\"\n// //     name=\"recipient\"\n// //     placeholder=\"받는 사람\"\n// //     onChange={handleInputChange}\n// //   />\n// //   <input\n// //     type=\"text\"\n// //     name=\"deliveryInstruction\"\n// //     placeholder=\"배송 요청사항\"\n// //     onChange={handleInputChange}\n// //   />\n// //   <select name=\"paymentMethodId\" onChange={handleInputChange}>\n// //     <option value=\"\">결제 수단 선택</option>\n// //     <option value=\"1\">신용카드</option>\n// //     <option value=\"2\">계좌이체</option>\n// //     <option value=\"3\">기타</option>\n// //   </select>\n// //   <h3>상품 목록</h3>\n// //   <div className=\"product-list\">\n// //     {products.map((product) => (\n// //       <div key={product.productId} className=\"product\">\n// //         <h3>{product.productName}</h3>\n// //         <p>가격: ${product.productPrice}</p>\n// //         <p>수량: {product.quantity}</p>\n// //         <p>색상: {product.productColor}</p>\n// //         <p>사이즈: {product.productSize}</p>\n// //       </div>\n// //     ))}\n// //   </div>\n// // </div>\n// //       <div className=\"payment-button\">\n// //         <button onClick={submitOrder}>주문하기</button>\n// //       </div>\n// //       {paymentResult && <p>{paymentResult}</p>}\n// //     </div>\n// //   );\n// // };\n\n// // export default App;\n// import React, { useState, useEffect } from \"react\";\n// import axios from \"axios\";\n// import \"./App.css\";\n\n// const App = () => {\n//   const [orderInfo, setOrderInfo] = useState({\n//     deliveryAddress: \"\",\n//     recipient: \"\",\n//     deliveryInstruction: \"\",\n//     paymentMethodId: \"\",\n//   });\n//   const [products, setProducts] = useState([]);\n//   const [paymentResult, setPaymentResult] = useState(\"\");\n\n//   useEffect(() => {\n//     const fetchProducts = async () => {\n//       try {\n//         const response = await axios.get(\n//           `${process.env.REACT_APP_API_URL}/product/content/3`\n//         );\n//         setProducts(response.data);\n//       } catch (error) {\n//         console.error(\"상품 데이터를 불러오는 중 오류가 발생했습니다:\", error);\n//       }\n//     };\n//     fetchProducts();\n//   }, []);\n\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setOrderInfo({ ...orderInfo, [name]: value });\n//   };\n\n//   const submitOrder = async () => {\n//     const orderAmount = products.reduce(\n//       (total, product) => total + product.productPrice * product.quantity,\n//       0\n//     );\n//     try {\n//       const response = await axios.post(\n//         `${process.env.REACT_APP_API_URL}/orders`,\n//         {\n//           ...orderInfo,\n//           products: products.map((product) => ({\n//             productId: product.productCode,\n//             quantity: product.quantity,\n//           })),\n//           orderAmount,\n//         }\n//       );\n//       if (response.status === 200) {\n//         setPaymentResult(\"주문이 성공적으로 처리되었습니다.\");\n//       }\n//     } catch (error) {\n//       console.error(\"주문 처리 중 오류가 발생했습니다.\", error);\n//       setPaymentResult(\"주문 처리 중 오류가 발생했습니다.\");\n//     }\n//   };\n\n//   return (\n//     <div className=\"app\">\n//       {/* 렌더링 및 입력 폼 코드 */}\n//       <div className=\"order-form\">\n//         <h2>주문 및 결제</h2>\n//         <input\n//           type=\"text\"\n//           name=\"deliveryAddress\"\n//           placeholder=\"배송지\"\n//           onChange={handleInputChange}\n//         />\n//         <input\n//           type=\"text\"\n//           name=\"recipient\"\n//           placeholder=\"받는 사람\"\n//           onChange={handleInputChange}\n//         />\n//         <input\n//           type=\"text\"\n//           name=\"deliveryInstruction\"\n//           placeholder=\"배송 요청사항\"\n//           onChange={handleInputChange}\n//         />\n//         <select name=\"paymentMethodId\" onChange={handleInputChange}>\n//           <option value=\"\">결제 수단 선택</option>\n//           <option value=\"1\">신용카드</option>\n//           <option value=\"2\">계좌이체</option>\n//           <option value=\"3\">기타</option>\n//         </select>\n//         <h3>상품 목록</h3>\n//         <div className=\"product-list\">\n//           {products.map((product) => (\n//             <div key={product.productId} className=\"product\">\n//               <h3>{product.productName}</h3>\n//               <p>가격: ${product.productPrice}</p>\n//               <p>수량: {product.quantity}</p>\n//               <p>색상: {product.productColor}</p>\n//               <p>사이즈: {product.productSize}</p>\n//             </div>\n//           ))}\n//         </div>\n//       </div>\n//       <div className=\"payment-button\">\n//         <button onClick={submitOrder}>주문하기</button>\n//       </div>\n//       {paymentResult && <p>{paymentResult}</p>}\n//     </div>\n//   );\n// };\n\n// export default App;\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [orderInfo, setOrderInfo] = useState({\n    deliveryAddress: \"\",\n    recipient: \"\",\n    deliveryInstruction: \"\",\n    paymentMethodId: \"\"\n  });\n\n  // products를 배열에서 객체로 변경\n  const [product, setProduct] = useState({});\n  const [paymentResult, setPaymentResult] = useState(\"\");\n  useEffect(() => {\n    const fetchProduct = async () => {\n      try {\n        // 특정 상품의 세부 정보를 불러오는 엔드포인트로 변경\n        const response = await axios.get(`${process.env.REACT_APP_API_URL}/product/content/3`);\n        setProduct(response.data);\n      } catch (error) {\n        console.error(\"상품 데이터를 불러오는 중 오류가 발생했습니다:\", error);\n      }\n    };\n    fetchProduct();\n  }, []);\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setOrderInfo({\n      ...orderInfo,\n      [name]: value\n    });\n  };\n  const submitOrder = async () => {\n    try {\n      // 주문 처리 요청 부분 수정\n      const response = await axios.post(`${process.env.REACT_APP_API_URL}/orders`, {\n        ...orderInfo,\n        products: [{\n          productId: product.productId,\n          quantity: 1 // 예시로 1을 사용, 실제 양식에 맞게 수정 필요\n        }],\n        orderAmount: product.productPrice // 예시로 productPrice 사용, 실제 계산 로직 필요\n      });\n      if (response.status === 200) {\n        setPaymentResult(\"주문이 성공적으로 처리되었습니다.\");\n      }\n    } catch (error) {\n      console.error(\"주문 처리 중 오류가 발생했습니다.\", error);\n      setPaymentResult(\"주문 처리 중 오류가 발생했습니다.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"order-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"\\uC0C1\\uD488 \\uC815\\uBCF4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 9\n      }, this), product && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"product\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: product.productName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"\\uAC00\\uACA9: $\", product.productPrice]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"\\uC0C9\\uC0C1: \", product.productColor]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"\\uC0AC\\uC774\\uC988: \", product.productSize]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"payment-button\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: submitOrder,\n          children: \"\\uC8FC\\uBB38\\uD558\\uAE30\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 9\n      }, this), paymentResult && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: paymentResult\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 27\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 285,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"PIGlVgpJ3A0qP3APn+x/XG4VW3Q=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","App","_s","orderInfo","setOrderInfo","deliveryAddress","recipient","deliveryInstruction","paymentMethodId","product","setProduct","paymentResult","setPaymentResult","fetchProduct","response","get","process","env","REACT_APP_API_URL","data","error","console","handleInputChange","e","name","value","target","submitOrder","post","products","productId","quantity","orderAmount","productPrice","status","className","children","fileName","_jsxFileName","lineNumber","columnNumber","productName","productColor","productSize","onClick","_c","$RefreshReg$"],"sources":["D:/ai_chat/react-workspace/blogfriday/src/App.js"],"sourcesContent":["// // import React, { useState, useEffect } from \"react\";\n// // import axios from \"axios\";\n// // import \"./App.css\";\n\n// // const App = () => {\n// //   const [orderInfo, setOrderInfo] = useState({\n// //     deliveryAddress: \"\",\n// //     recipient: \"\",\n// //     deliveryInstruction: \"\",\n// //     paymentMethodId: \"\",\n// //   });\n\n// //   const [products, setProducts] = useState([]);\n// //   const [paymentResult, setPaymentResult] = useState(\"\");\n\n// //   useEffect(() => {\n// //     const fetchProducts = async () => {\n// //       try {\n// //         const response = await axios.get(\n// //           `${process.env.REACT_APP_API_URL}/product`\n// //         );\n// //         setProducts(response.data);\n// //       } catch (error) {\n// //         console.error(\"상품 데이터를 불러오는 중 오류가 발생했습니다:\", error);\n// //       }\n// //     };\n\n// //     fetchProducts();\n// //   }, []);\n\n// //   const handleInputChange = (e) => {\n// //     const { name, value } = e.target;\n// //     setOrderInfo({ ...orderInfo, [name]: value });\n// //   };\n\n// //   const submitOrder = async () => {\n// //     const orderAmount = products.reduce(\n// //       (total, product) => total + product.productPrice * product.quantity,\n// //       0\n// //     );\n// //     try {\n// //       const response = await axios.post(\n// //         `${process.env.REACT_APP_API_URL}/orders`,\n// //         {\n// //           ...orderInfo,\n// //           products: products.map((product) => ({\n// //             productId: product.productId,\n// //             quantity: product.quantity,\n// //           })),\n// //           orderAmount,\n// //         }\n// //       );\n\n// //       if (response.status === 200) {\n// //         setPaymentResult(\"주문이 성공적으로 처리되었습니다.\");\n// //       }\n// //     } catch (error) {\n// //       console.error(\"주문 처리 중 오류가 발생했습니다.\", error);\n// //       setPaymentResult(\"주문 처리 중 오류가 발생했습니다.\");\n// //     }\n// //   };\n\n// //   return (\n// //     <div className=\"app\">\n// // <div className=\"order-form\">\n// //   <h2>주문 및 결제</h2>\n// //   <input\n// //     type=\"text\"\n// //     name=\"deliveryAddress\"\n// //     placeholder=\"배송지\"\n// //     onChange={handleInputChange}\n// //   />\n// //   <input\n// //     type=\"text\"\n// //     name=\"recipient\"\n// //     placeholder=\"받는 사람\"\n// //     onChange={handleInputChange}\n// //   />\n// //   <input\n// //     type=\"text\"\n// //     name=\"deliveryInstruction\"\n// //     placeholder=\"배송 요청사항\"\n// //     onChange={handleInputChange}\n// //   />\n// //   <select name=\"paymentMethodId\" onChange={handleInputChange}>\n// //     <option value=\"\">결제 수단 선택</option>\n// //     <option value=\"1\">신용카드</option>\n// //     <option value=\"2\">계좌이체</option>\n// //     <option value=\"3\">기타</option>\n// //   </select>\n// //   <h3>상품 목록</h3>\n// //   <div className=\"product-list\">\n// //     {products.map((product) => (\n// //       <div key={product.productId} className=\"product\">\n// //         <h3>{product.productName}</h3>\n// //         <p>가격: ${product.productPrice}</p>\n// //         <p>수량: {product.quantity}</p>\n// //         <p>색상: {product.productColor}</p>\n// //         <p>사이즈: {product.productSize}</p>\n// //       </div>\n// //     ))}\n// //   </div>\n// // </div>\n// //       <div className=\"payment-button\">\n// //         <button onClick={submitOrder}>주문하기</button>\n// //       </div>\n// //       {paymentResult && <p>{paymentResult}</p>}\n// //     </div>\n// //   );\n// // };\n\n// // export default App;\n// import React, { useState, useEffect } from \"react\";\n// import axios from \"axios\";\n// import \"./App.css\";\n\n// const App = () => {\n//   const [orderInfo, setOrderInfo] = useState({\n//     deliveryAddress: \"\",\n//     recipient: \"\",\n//     deliveryInstruction: \"\",\n//     paymentMethodId: \"\",\n//   });\n//   const [products, setProducts] = useState([]);\n//   const [paymentResult, setPaymentResult] = useState(\"\");\n\n//   useEffect(() => {\n//     const fetchProducts = async () => {\n//       try {\n//         const response = await axios.get(\n//           `${process.env.REACT_APP_API_URL}/product/content/3`\n//         );\n//         setProducts(response.data);\n//       } catch (error) {\n//         console.error(\"상품 데이터를 불러오는 중 오류가 발생했습니다:\", error);\n//       }\n//     };\n//     fetchProducts();\n//   }, []);\n\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setOrderInfo({ ...orderInfo, [name]: value });\n//   };\n\n//   const submitOrder = async () => {\n//     const orderAmount = products.reduce(\n//       (total, product) => total + product.productPrice * product.quantity,\n//       0\n//     );\n//     try {\n//       const response = await axios.post(\n//         `${process.env.REACT_APP_API_URL}/orders`,\n//         {\n//           ...orderInfo,\n//           products: products.map((product) => ({\n//             productId: product.productCode,\n//             quantity: product.quantity,\n//           })),\n//           orderAmount,\n//         }\n//       );\n//       if (response.status === 200) {\n//         setPaymentResult(\"주문이 성공적으로 처리되었습니다.\");\n//       }\n//     } catch (error) {\n//       console.error(\"주문 처리 중 오류가 발생했습니다.\", error);\n//       setPaymentResult(\"주문 처리 중 오류가 발생했습니다.\");\n//     }\n//   };\n\n//   return (\n//     <div className=\"app\">\n//       {/* 렌더링 및 입력 폼 코드 */}\n//       <div className=\"order-form\">\n//         <h2>주문 및 결제</h2>\n//         <input\n//           type=\"text\"\n//           name=\"deliveryAddress\"\n//           placeholder=\"배송지\"\n//           onChange={handleInputChange}\n//         />\n//         <input\n//           type=\"text\"\n//           name=\"recipient\"\n//           placeholder=\"받는 사람\"\n//           onChange={handleInputChange}\n//         />\n//         <input\n//           type=\"text\"\n//           name=\"deliveryInstruction\"\n//           placeholder=\"배송 요청사항\"\n//           onChange={handleInputChange}\n//         />\n//         <select name=\"paymentMethodId\" onChange={handleInputChange}>\n//           <option value=\"\">결제 수단 선택</option>\n//           <option value=\"1\">신용카드</option>\n//           <option value=\"2\">계좌이체</option>\n//           <option value=\"3\">기타</option>\n//         </select>\n//         <h3>상품 목록</h3>\n//         <div className=\"product-list\">\n//           {products.map((product) => (\n//             <div key={product.productId} className=\"product\">\n//               <h3>{product.productName}</h3>\n//               <p>가격: ${product.productPrice}</p>\n//               <p>수량: {product.quantity}</p>\n//               <p>색상: {product.productColor}</p>\n//               <p>사이즈: {product.productSize}</p>\n//             </div>\n//           ))}\n//         </div>\n//       </div>\n//       <div className=\"payment-button\">\n//         <button onClick={submitOrder}>주문하기</button>\n//       </div>\n//       {paymentResult && <p>{paymentResult}</p>}\n//     </div>\n//   );\n// };\n\n// export default App;\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport \"./App.css\";\n\nconst App = () => {\n  const [orderInfo, setOrderInfo] = useState({\n    deliveryAddress: \"\",\n    recipient: \"\",\n    deliveryInstruction: \"\",\n    paymentMethodId: \"\",\n  });\n\n  // products를 배열에서 객체로 변경\n  const [product, setProduct] = useState({});\n  const [paymentResult, setPaymentResult] = useState(\"\");\n\n  useEffect(() => {\n    const fetchProduct = async () => {\n      try {\n        // 특정 상품의 세부 정보를 불러오는 엔드포인트로 변경\n        const response = await axios.get(\n          `${process.env.REACT_APP_API_URL}/product/content/3`\n        );\n        setProduct(response.data);\n      } catch (error) {\n        console.error(\"상품 데이터를 불러오는 중 오류가 발생했습니다:\", error);\n      }\n    };\n    fetchProduct();\n  }, []);\n\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    setOrderInfo({ ...orderInfo, [name]: value });\n  };\n\n  const submitOrder = async () => {\n    try {\n      // 주문 처리 요청 부분 수정\n      const response = await axios.post(\n        `${process.env.REACT_APP_API_URL}/orders`,\n        {\n          ...orderInfo,\n          products: [\n            {\n              productId: product.productId,\n              quantity: 1, // 예시로 1을 사용, 실제 양식에 맞게 수정 필요\n            },\n          ],\n          orderAmount: product.productPrice, // 예시로 productPrice 사용, 실제 계산 로직 필요\n        }\n      );\n      if (response.status === 200) {\n        setPaymentResult(\"주문이 성공적으로 처리되었습니다.\");\n      }\n    } catch (error) {\n      console.error(\"주문 처리 중 오류가 발생했습니다.\", error);\n      setPaymentResult(\"주문 처리 중 오류가 발생했습니다.\");\n    }\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"order-form\">\n        {/* 주문 및 결제 폼 코드 */}\n        {/* 상품 정보 표시 코드 수정 */}\n        <h3>상품 정보</h3>\n        {product && (\n          <div className=\"product\">\n            <h3>{product.productName}</h3>\n            <p>가격: ${product.productPrice}</p>\n            <p>색상: {product.productColor}</p>\n            <p>사이즈: {product.productSize}</p>\n          </div>\n        )}\n        <div className=\"payment-button\">\n          <button onClick={submitOrder}>주문하기</button>\n        </div>\n        {paymentResult && <p>{paymentResult}</p>}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAC;IACzCS,eAAe,EAAE,EAAE;IACnBC,SAAS,EAAE,EAAE;IACbC,mBAAmB,EAAE,EAAE;IACvBC,eAAe,EAAE;EACnB,CAAC,CAAC;;EAEF;EACA,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGd,QAAQ,CAAC,CAAC,CAAC,CAAC;EAC1C,MAAM,CAACe,aAAa,EAAEC,gBAAgB,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EAEtDC,SAAS,CAAC,MAAM;IACd,MAAMgB,YAAY,GAAG,MAAAA,CAAA,KAAY;MAC/B,IAAI;QACF;QACA,MAAMC,QAAQ,GAAG,MAAMhB,KAAK,CAACiB,GAAG,CAC7B,GAAEC,OAAO,CAACC,GAAG,CAACC,iBAAkB,oBACnC,CAAC;QACDR,UAAU,CAACI,QAAQ,CAACK,IAAI,CAAC;MAC3B,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MACpD;IACF,CAAC;IACDP,YAAY,CAAC,CAAC;EAChB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMS,iBAAiB,GAAIC,CAAC,IAAK;IAC/B,MAAM;MAAEC,IAAI;MAAEC;IAAM,CAAC,GAAGF,CAAC,CAACG,MAAM;IAChCtB,YAAY,CAAC;MAAE,GAAGD,SAAS;MAAE,CAACqB,IAAI,GAAGC;IAAM,CAAC,CAAC;EAC/C,CAAC;EAED,MAAME,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC9B,IAAI;MACF;MACA,MAAMb,QAAQ,GAAG,MAAMhB,KAAK,CAAC8B,IAAI,CAC9B,GAAEZ,OAAO,CAACC,GAAG,CAACC,iBAAkB,SAAQ,EACzC;QACE,GAAGf,SAAS;QACZ0B,QAAQ,EAAE,CACR;UACEC,SAAS,EAAErB,OAAO,CAACqB,SAAS;UAC5BC,QAAQ,EAAE,CAAC,CAAE;QACf,CAAC,CACF;QACDC,WAAW,EAAEvB,OAAO,CAACwB,YAAY,CAAE;MACrC,CACF,CAAC;MACD,IAAInB,QAAQ,CAACoB,MAAM,KAAK,GAAG,EAAE;QAC3BtB,gBAAgB,CAAC,oBAAoB,CAAC;MACxC;IACF,CAAC,CAAC,OAAOQ,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;MAC3CR,gBAAgB,CAAC,qBAAqB,CAAC;IACzC;EACF,CAAC;EAED,oBACEZ,OAAA;IAAKmC,SAAS,EAAC,KAAK;IAAAC,QAAA,eAClBpC,OAAA;MAAKmC,SAAS,EAAC,YAAY;MAAAC,QAAA,gBAGzBpC,OAAA;QAAAoC,QAAA,EAAI;MAAK;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EACb/B,OAAO,iBACNT,OAAA;QAAKmC,SAAS,EAAC,SAAS;QAAAC,QAAA,gBACtBpC,OAAA;UAAAoC,QAAA,EAAK3B,OAAO,CAACgC;QAAW;UAAAJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eAC9BxC,OAAA;UAAAoC,QAAA,GAAG,iBAAK,EAAC3B,OAAO,CAACwB,YAAY;QAAA;UAAAI,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAClCxC,OAAA;UAAAoC,QAAA,GAAG,gBAAI,EAAC3B,OAAO,CAACiC,YAAY;QAAA;UAAAL,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACjCxC,OAAA;UAAAoC,QAAA,GAAG,sBAAK,EAAC3B,OAAO,CAACkC,WAAW;QAAA;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC9B,CACN,eACDxC,OAAA;QAAKmC,SAAS,EAAC,gBAAgB;QAAAC,QAAA,eAC7BpC,OAAA;UAAQ4C,OAAO,EAAEjB,WAAY;UAAAS,QAAA,EAAC;QAAI;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACxC,CAAC,EACL7B,aAAa,iBAAIX,OAAA;QAAAoC,QAAA,EAAIzB;MAAa;QAAA0B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACrC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACtC,EAAA,CA9EID,GAAG;AAAA4C,EAAA,GAAH5C,GAAG;AAgFT,eAAeA,GAAG;AAAC,IAAA4C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}