{"ast":null,"code":"var _jsxFileName = \"E:\\\\ai_chat\\\\react\\\\blogfriday\\\\src\\\\components\\\\chat\\\\Chat.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { chatActions } from \"../../toolkit/actions/chat_Action\";\nimport \"./Chat.css\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Chat() {\n  _s();\n  var _location$state;\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const [currentUserId2, setCurrentUserId2] = useState(null);\n  /// 채팅리스트\n\n  const currentUserID = 1;\n  const [chatFriend, setChatFriend] = useState({\n    chatroom_id: \"\",\n    user_id1: 1,\n    user_id2: \"\",\n    chatroom_name: \"\"\n  });\n  const navichatHome = () => {\n    navigate(\"/chat/home\");\n  };\n  const {\n    friendList = []\n  } = useSelector(state => state.chat);\n\n  /// 웹소켓\n  const [webSocket, setWebSocket] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [inputMessage, setInputMessage] = useState(\"\");\n  const [isConnected, setIsConnected] = useState(false);\n  const location = useLocation();\n  const [chatRoom, setChatRoom] = useState((_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.user_id);\n  // WebSocket 연결 설정\n\n  //연결\n  const connectWebSocket = () => {\n    if (webSocket) {\n      webSocket.close();\n    }\n    console.log(chatRoom);\n    const ws = new WebSocket(\"ws://localhost:8090/ws/chat\");\n    ws.onopen = () => {\n      console.log(\"WebSocket 서버에 연결됨\");\n      setIsConnected(true);\n      const enterMessage = {\n        messageType: \"ENTER\",\n        chatRoomId: chatRoom,\n        senderId: 1,\n        message: \"\"\n      };\n      ws.send(JSON.stringify(enterMessage));\n      console.log(\"입장\", enterMessage);\n    };\n    ws.onmessage = event => {\n      const message = JSON.parse(event.data);\n      setMessages(prevMessages => [...prevMessages, message]);\n    };\n    ws.onclose = e => {\n      console.log(e.code);\n      console.log(\"WebSocket 서버에서 연결 끊김\");\n      setIsConnected(false);\n    };\n    setWebSocket(ws);\n  };\n  useEffect(() => {\n    // 현재 채팅방에 해당하는 user_id2를 찾아 상태에 저장합니다.\n    const currentChat = friendList.find(chat => chat.chatroom_id === chatRoom);\n    if (currentChat) {\n      setCurrentUserId2(currentChat.user_id2);\n    }\n  }, [chatRoom, friendList]); // chatRoom 또는 friendList가 변경될 때마다 실행됩니다.\n\n  const sendMessage = () => {\n    if (webSocket) {\n      const message = {\n        messageType: \"TALK\",\n        chatRoomId: chatRoom,\n        // 채팅방에 따라 동적으로 설정해야 함\n        senderId: 1,\n        // 사용자의 ID여야 함\n        message: inputMessage\n      };\n      console.log(message);\n      webSocket.send(JSON.stringify(message));\n      setInputMessage(\"\");\n    }\n  };\n  const changeFriendName = (chatRoomId, userId2) => {\n    setChatRoom(chatRoomId);\n    setCurrentUserId2(userId2);\n    retryConnection();\n  };\n  const closeWebSocket = () => {\n    if (webSocket) {\n      webSocket.close(); // WebSocket 연결 종료\n      setWebSocket(null); // 참조 제거\n    }\n  };\n  const sendLeaveMessage = () => {\n    if (webSocket && webSocket.readyState === WebSocket.OPEN) {\n      const leaveMessage = {\n        messageType: \"LEAVE\",\n        chatRoomId: chatRoom,\n        senderId: currentUserID,\n        // 현재 사용자 ID, 적절하게 설정해야 함\n        message: \"\"\n      };\n      webSocket.send(JSON.stringify(leaveMessage));\n      console.log(\"퇴장\", leaveMessage);\n    }\n  };\n  const retryConnection = () => {\n    closeWebSocket(); // 기존 연결 닫기\n    connectWebSocket(); // 새 연결 시작\n  };\n  const backtolist = () => {\n    closeWebSocket();\n  };\n  useEffect(() => {\n    return () => {\n      closeWebSocket();\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat_home\",\n    children: isConnected ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat_back_button\",\n        onClick: backtolist,\n        children: \"\\uB4A4\\uB85C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\uCC44\\uD305\\uBC29\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat_content_box\",\n        children: messages.map((msg, index) => msg.message && (msg.senderId === currentUserId2 || msg.senderId === chatFriend.user_id1) &&\n        /*#__PURE__*/\n        // senderId가 currentUserId2와 같을 때만 메시지를 표시합니다.\n        _jsxDEV(\"p\", {\n          children: [msg.senderId, \": \", msg.message]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 19\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        className: \"chat_text_send_button\",\n        value: inputMessage,\n        onChange: e => setInputMessage(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat_foot_bar\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"chat_foot_bar_button\",\n          onClick: sendMessage,\n          children: \"\\uBCF4\\uB0B4\\uAE30\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"\\uCC44\\uD305\\uBC29\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat_home_header\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"user_id2\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"\\uCE5C\\uAD6C\\uCD94\\uAC00\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat_home_body\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat_home_menubar\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"chm_button\",\n            onClick: navichatHome,\n            children: \"\\uCE5C\\uAD6C\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"chm_button\",\n            children: \"\\uCC44\\uD305\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"chatFriendList\",\n            children: friendList.filter(chat => chat.user_id1 === chat.user_id2) // 조건에 맞는 항목만 필터링\n            .map(chat => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"chatFriendListbox\",\n              onClick: () => {\n                changeFriendName(chat.chatroom_id);\n                retryConnection();\n              },\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: \"\\uB098\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 202,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 201,\n                columnNumber: 23\n              }, this)\n            }, chat.chatroom_id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 193,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: friendList && friendList.filter(chat => chat.user_id1 !== chat.user_id2).map(chat => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"chatFriendListbox\",\n              onClick: () => {\n                changeFriendName(chat.chatroom_id, chat.user_id2);\n                retryConnection();\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                children: [\"\\uAD6C\\uB3C5\\uBC29 \\uB118\\uBC84: \", chat.chatroom_id]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 220,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [\"\\uAD6C\\uB3C5\\uBC29 \\uCE5C\\uAD6C: \", chat.user_id2]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 221,\n                columnNumber: 25\n              }, this)]\n            }, chat.chatroom_id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 212,\n              columnNumber: 23\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 5\n  }, this);\n}\n_s(Chat, \"NmYd+H83SCfunCT00afhQ8CD6cA=\", false, function () {\n  return [useNavigate, useDispatch, useSelector, useLocation];\n});\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useState","useEffect","useLocation","useNavigate","useDispatch","useSelector","chatActions","jsxDEV","_jsxDEV","Fragment","_Fragment","Chat","_s","_location$state","navigate","dispatch","currentUserId2","setCurrentUserId2","currentUserID","chatFriend","setChatFriend","chatroom_id","user_id1","user_id2","chatroom_name","navichatHome","friendList","state","chat","webSocket","setWebSocket","messages","setMessages","inputMessage","setInputMessage","isConnected","setIsConnected","location","chatRoom","setChatRoom","user_id","connectWebSocket","close","console","log","ws","WebSocket","onopen","enterMessage","messageType","chatRoomId","senderId","message","send","JSON","stringify","onmessage","event","parse","data","prevMessages","onclose","e","code","currentChat","find","sendMessage","changeFriendName","userId2","retryConnection","closeWebSocket","sendLeaveMessage","readyState","OPEN","leaveMessage","backtolist","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","map","msg","index","type","value","onChange","target","name","filter","_c","$RefreshReg$"],"sources":["E:/ai_chat/react/blogfriday/src/components/chat/Chat.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { chatActions } from \"../../toolkit/actions/chat_Action\";\r\nimport \"./Chat.css\";\r\n\r\nfunction Chat() {\r\n  const navigate = useNavigate();\r\n  const dispatch = useDispatch();\r\n  const [currentUserId2, setCurrentUserId2] = useState(null);\r\n  /// 채팅리스트\r\n\r\n  const currentUserID = 1;\r\n  const [chatFriend, setChatFriend] = useState({\r\n    chatroom_id: \"\",\r\n    user_id1: 1,\r\n    user_id2: \"\",\r\n    chatroom_name: \"\",\r\n  });\r\n\r\n  const navichatHome = () => {\r\n    navigate(\"/chat/home\");\r\n  };\r\n\r\n  const { friendList = [] } = useSelector((state) => state.chat);\r\n\r\n  /// 웹소켓\r\n  const [webSocket, setWebSocket] = useState(null);\r\n  const [messages, setMessages] = useState([]);\r\n  const [inputMessage, setInputMessage] = useState(\"\");\r\n  const [isConnected, setIsConnected] = useState(false);\r\n  const location = useLocation();\r\n  const [chatRoom, setChatRoom] = useState(location.state?.user_id);\r\n  // WebSocket 연결 설정\r\n\r\n  //연결\r\n  const connectWebSocket = () => {\r\n    if (webSocket) {\r\n      webSocket.close();\r\n    }\r\n\r\n    console.log(chatRoom);\r\n\r\n    const ws = new WebSocket(\"ws://localhost:8090/ws/chat\");\r\n\r\n    ws.onopen = () => {\r\n      console.log(\"WebSocket 서버에 연결됨\");\r\n      setIsConnected(true);\r\n      const enterMessage = {\r\n        messageType: \"ENTER\",\r\n        chatRoomId: chatRoom,\r\n        senderId: 1,\r\n        message: \"\",\r\n      };\r\n      ws.send(JSON.stringify(enterMessage));\r\n      console.log(\"입장\", enterMessage);\r\n    };\r\n\r\n    ws.onmessage = (event) => {\r\n      const message = JSON.parse(event.data);\r\n      setMessages((prevMessages) => [...prevMessages, message]);\r\n    };\r\n\r\n    ws.onclose = (e) => {\r\n      console.log(e.code);\r\n      console.log(\"WebSocket 서버에서 연결 끊김\");\r\n      setIsConnected(false);\r\n    };\r\n\r\n    setWebSocket(ws);\r\n  };\r\n\r\n  useEffect(() => {\r\n    // 현재 채팅방에 해당하는 user_id2를 찾아 상태에 저장합니다.\r\n    const currentChat = friendList.find(\r\n      (chat) => chat.chatroom_id === chatRoom\r\n    );\r\n    if (currentChat) {\r\n      setCurrentUserId2(currentChat.user_id2);\r\n    }\r\n  }, [chatRoom, friendList]); // chatRoom 또는 friendList가 변경될 때마다 실행됩니다.\r\n\r\n  const sendMessage = () => {\r\n    if (webSocket) {\r\n      const message = {\r\n        messageType: \"TALK\",\r\n        chatRoomId: chatRoom, // 채팅방에 따라 동적으로 설정해야 함\r\n        senderId: 1, // 사용자의 ID여야 함\r\n        message: inputMessage,\r\n      };\r\n      console.log(message);\r\n      webSocket.send(JSON.stringify(message));\r\n      setInputMessage(\"\");\r\n    }\r\n  };\r\n\r\n  const changeFriendName = (chatRoomId, userId2) => {\r\n    setChatRoom(chatRoomId);\r\n    setCurrentUserId2(userId2);\r\n    retryConnection();\r\n  };\r\n\r\n  const closeWebSocket = () => {\r\n    if (webSocket) {\r\n      webSocket.close(); // WebSocket 연결 종료\r\n      setWebSocket(null); // 참조 제거\r\n    }\r\n  };\r\n\r\n  const sendLeaveMessage = () => {\r\n    if (webSocket && webSocket.readyState === WebSocket.OPEN) {\r\n      const leaveMessage = {\r\n        messageType: \"LEAVE\",\r\n        chatRoomId: chatRoom,\r\n        senderId: currentUserID, // 현재 사용자 ID, 적절하게 설정해야 함\r\n        message: \"\",\r\n      };\r\n      webSocket.send(JSON.stringify(leaveMessage));\r\n      console.log(\"퇴장\", leaveMessage);\r\n    }\r\n  };\r\n\r\n  const retryConnection = () => {\r\n    closeWebSocket(); // 기존 연결 닫기\r\n    connectWebSocket(); // 새 연결 시작\r\n  };\r\n\r\n  const backtolist = () => {\r\n    closeWebSocket();\r\n  };\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      closeWebSocket();\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"chat_home\">\r\n      {isConnected ? (\r\n        <>\r\n          <div className=\"chat_back_button\" onClick={backtolist}>\r\n            뒤로\r\n          </div>\r\n          <h2>채팅방</h2>\r\n\r\n          <div className=\"chat_content_box\">\r\n            {messages.map(\r\n              (msg, index) =>\r\n                msg.message &&\r\n                (msg.senderId === currentUserId2 ||\r\n                  msg.senderId === chatFriend.user_id1) && ( // senderId가 currentUserId2와 같을 때만 메시지를 표시합니다.\r\n                  <p key={index}>\r\n                    {msg.senderId}: {msg.message}\r\n                  </p>\r\n                )\r\n            )}\r\n          </div>\r\n          <input\r\n            type=\"text\"\r\n            className=\"chat_text_send_button\"\r\n            value={inputMessage}\r\n            onChange={(e) => setInputMessage(e.target.value)}\r\n          ></input>\r\n          <div className=\"chat_foot_bar\">\r\n            <button className=\"chat_foot_bar_button\" onClick={sendMessage}>\r\n              보내기\r\n            </button>\r\n          </div>\r\n        </>\r\n      ) : (\r\n        <div>\r\n          <div>채팅방</div>\r\n          <div className=\"chat_home_header\">\r\n            <div>\r\n              <input type=\"text\" name=\"user_id2\" />\r\n            </div>\r\n            <button type=\"submit\">친구추가</button>\r\n          </div>\r\n          <div className=\"chat_home_body\">\r\n            <div className=\"chat_home_menubar\">\r\n              <button className=\"chm_button\" onClick={navichatHome}>\r\n                친구\r\n              </button>\r\n              <button className=\"chm_button\">채팅</button>\r\n            </div>\r\n            <div>\r\n              <div className=\"chatFriendList\">\r\n                {friendList\r\n                  .filter((chat) => chat.user_id1 === chat.user_id2) // 조건에 맞는 항목만 필터링\r\n                  .map((chat) => (\r\n                    <div\r\n                      key={chat.chatroom_id}\r\n                      className=\"chatFriendListbox\"\r\n                      onClick={() => {\r\n                        changeFriendName(chat.chatroom_id);\r\n                        retryConnection();\r\n                      }}\r\n                    >\r\n                      <div>\r\n                        <div>나</div>\r\n                      </div>\r\n                    </div>\r\n                  ))}\r\n              </div>\r\n              <div>\r\n                {friendList &&\r\n                  friendList\r\n                    .filter((chat) => chat.user_id1 !== chat.user_id2)\r\n                    .map((chat) => (\r\n                      <div\r\n                        key={chat.chatroom_id}\r\n                        className=\"chatFriendListbox\"\r\n                        onClick={() => {\r\n                          changeFriendName(chat.chatroom_id, chat.user_id2);\r\n                          retryConnection();\r\n                        }}\r\n                      >\r\n                        <div>구독방 넘버: {chat.chatroom_id}</div>\r\n                        <div>구독방 친구: {chat.user_id2}</div>\r\n                      </div>\r\n                    ))}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chat;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}