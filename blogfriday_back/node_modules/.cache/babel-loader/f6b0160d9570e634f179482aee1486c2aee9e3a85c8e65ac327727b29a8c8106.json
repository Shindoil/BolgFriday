{"ast":null,"code":"var _jsxFileName = \"D:\\\\ai_chat\\\\react-workspace\\\\blogfriday\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from \"react\";\n// import axios from \"axios\";\n// import API_URL from \"./config\";\n// import \"./App.css\";\n\n// const App = () => {\n//   const [orderInfo, setOrderInfo] = useState({\n//     deliveryAddress: \"\",\n//     recipient: \"\",\n//     deliveryInstruction: \"\",\n//     paymentMethodId: \"\",\n//   });\n\n//   // products를 배열에서 객체로 변경\n//   const [product, setProduct] = useState({});\n//   console.log(product.productName);\n//   const [paymentResult, setPaymentResult] = useState(\"\");\n\n//   useEffect(() => {\n//     const fetchProduct = async () => {\n//       try {\n//         const response = await axios.get(`${API_URL}/product/content/3`);\n//         setProduct(response.data);\n//       } catch (error) {\n//         console.error(\"상품 데이터를 불러오는 중 오류가 발생했습니다:\", error);\n//       }\n//     };\n//     fetchProduct();\n//   }, []);\n\n//   console.log(\"현재 상품 상태:\", product.product_name);\n\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setOrderInfo({ ...orderInfo, [name]: value });\n//   };\n\n//   const submitOrder = async () => {\n//     try {\n//       const response = await axios.post(`${API_URL}/orders`, {\n//         ...orderInfo,\n//         products: [\n//           {\n//             productId: product.productId,\n//             quantity: 1, // 예시로 1을 사용, 실제 양식에 맞게 수정 필요\n//           },\n//         ],\n//         orderAmount: product.productPrice, // 예시로 productPrice 사용, 실제 계산 로직 필요\n//       });\n//       if (response.status === 200) {\n//         setPaymentResult(\"주문이 성공적으로 처리되었습니다.\");\n//       }\n//     } catch (error) {\n//       console.error(\"주문 처리 중 오류가 발생했습니다.\", error);\n//       setPaymentResult(\"주문 처리 중 오류가 발생했습니다.\");\n//     }\n//   };\n\n//   return (\n//     <div className=\"app\">\n//       {/* 렌더링 및 입력 폼 코드 */}\n//       <div className=\"order-form\">\n//         <h2>주문 및 결제</h2>\n//         <input\n//           type=\"text\"\n//           name=\"deliveryAddress\"\n//           placeholder=\"배송지\"\n//           onChange={handleInputChange}\n//         />\n//         <input\n//           type=\"text\"\n//           name=\"recipient\"\n//           placeholder=\"받는 사람\"\n//           onChange={handleInputChange}\n//         />\n//         <input\n//           type=\"text\"\n//           name=\"deliveryInstruction\"\n//           placeholder=\"배송 요청사항\"\n//           onChange={handleInputChange}\n//         />\n//         <select name=\"paymentMethodId\" onChange={handleInputChange}>\n//           <option value=\"\">결제 수단 선택</option>\n//           <option value=\"1\">신용카드</option>\n//           <option value=\"2\">계좌이체</option>\n//           <option value=\"3\">기타</option>\n//         </select>\n//         <div className=\"order-form\">\n//           <h3>상품 정보</h3>\n//           <div className=\"product-info\">\n//             {product.product_name ? ( // productName이 존재하는 경우에만 상품 정보 렌더링\n//               <>\n//                 <h2>{product.product_name}</h2>\n//                 <p>가격: ${product.product_price}</p>\n//                 <p>색상: {product.product_color}</p>\n//                 <p>사이즈: {product.product_size}</p>\n//               </>\n//             ) : (\n//               <p>상품 정보를 불러오는 중...</p> // 상품 정보가 아직 로드되지 않았을 경우\n//             )}\n//           </div>\n//           <div className=\"payment-button\">\n//             <button onClick={submitOrder}>주문하기</button>\n//           </div>\n//           {paymentResult && <p>{paymentResult}</p>}\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default App;\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport \"./App.css\";\n// API URL 설정파일 불러오기\nimport API_URL from \"./config\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  // 주문 정보와 결제 결과를 관리하는 상태\n  const [orderInfo, setOrderInfo] = useState({\n    deliveryAddress: \"\",\n    recipient: \"\",\n    deliveryInstruction: \"\",\n    paymentMethodId: \"\"\n  });\n  const [product, setProducts] = useState([]);\n  const [paymentResult, setPaymentResult] = useState(\"\");\n\n  // 상품 정보를 불러오는 효과\n  useEffect(() => {\n    const fetchProducts = async () => {\n      try {\n        const response = await axios.get(`${API_URL}/product`);\n        setProducts(response.data.map(product => ({\n          ...product,\n          quantity: 1\n        }))); // 모든 상품에 대해 초기 수량을 1로 설정\n      } catch (error) {\n        console.error(\"Error fetching product:\", error);\n      }\n    };\n    fetchProducts();\n  }, []);\n  console.log(\"product.name\", product.name);\n\n  // 주문 정보 변경 처리 함수\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setOrderInfo({\n      ...orderInfo,\n      [name]: value\n    });\n  };\n\n  // 상품 수량 변경 처리 함수\n  const handleQuantityChange = (index, quantity) => {\n    const updatedProducts = [...product];\n    updatedProducts[index].quantity = quantity;\n    setProducts(updatedProducts);\n  };\n\n  // 주문 제출 처리 함수\n  const submitOrder = async () => {\n    try {\n      const orderData = {\n        ...orderInfo,\n        products: product.map(product => ({\n          productId: product.id,\n          quantity: product.quantity\n        }))\n      };\n      const response = await axios.post(`${API_URL}/Order`, orderData);\n      if (response.status === 200) {\n        setPaymentResult(\"Order has been successfully processed.\");\n      } else {\n        setPaymentResult(\"There was a problem processing your order.\");\n      }\n    } catch (error) {\n      console.error(\"Order submission error:\", error);\n      setPaymentResult(\"Error processing order.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\uBC30\\uC1A1\\uC9C0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"deliveryAddress\",\n        placeholder: \"Delivery Address\",\n        onChange: handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"recipient\",\n        placeholder: \"Recipient\",\n        onChange: handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"deliveryInstruction\",\n        placeholder: \"Delivery Instructions\",\n        onChange: handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"\\uC0C1\\uD488 \\uBAA9\\uB85D\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 9\n      }, this), product.map((product, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: [product.product_name, \" - $\", product.product_price]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          value: product.product_quantity,\n          onChange: e => handleQuantityChange(index, parseInt(e.target.value, 10)),\n          min: \"1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 13\n        }, this)]\n      }, product.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: submitOrder,\n        children: \"Submit Order\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }, this), paymentResult && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: paymentResult\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 25\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 184,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"JuHzgOJsJNoquTxHK+4vmkzKLxI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","axios","API_URL","jsxDEV","_jsxDEV","App","_s","orderInfo","setOrderInfo","deliveryAddress","recipient","deliveryInstruction","paymentMethodId","product","setProducts","paymentResult","setPaymentResult","fetchProducts","response","get","data","map","quantity","error","console","log","name","handleInputChange","e","value","target","handleQuantityChange","index","updatedProducts","submitOrder","orderData","products","productId","id","post","status","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onChange","product_name","product_price","product_quantity","parseInt","min","onClick","_c","$RefreshReg$"],"sources":["D:/ai_chat/react-workspace/blogfriday/src/App.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\n// import axios from \"axios\";\n// import API_URL from \"./config\";\n// import \"./App.css\";\n\n// const App = () => {\n//   const [orderInfo, setOrderInfo] = useState({\n//     deliveryAddress: \"\",\n//     recipient: \"\",\n//     deliveryInstruction: \"\",\n//     paymentMethodId: \"\",\n//   });\n\n//   // products를 배열에서 객체로 변경\n//   const [product, setProduct] = useState({});\n//   console.log(product.productName);\n//   const [paymentResult, setPaymentResult] = useState(\"\");\n\n//   useEffect(() => {\n//     const fetchProduct = async () => {\n//       try {\n//         const response = await axios.get(`${API_URL}/product/content/3`);\n//         setProduct(response.data);\n//       } catch (error) {\n//         console.error(\"상품 데이터를 불러오는 중 오류가 발생했습니다:\", error);\n//       }\n//     };\n//     fetchProduct();\n//   }, []);\n\n//   console.log(\"현재 상품 상태:\", product.product_name);\n\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setOrderInfo({ ...orderInfo, [name]: value });\n//   };\n\n//   const submitOrder = async () => {\n//     try {\n//       const response = await axios.post(`${API_URL}/orders`, {\n//         ...orderInfo,\n//         products: [\n//           {\n//             productId: product.productId,\n//             quantity: 1, // 예시로 1을 사용, 실제 양식에 맞게 수정 필요\n//           },\n//         ],\n//         orderAmount: product.productPrice, // 예시로 productPrice 사용, 실제 계산 로직 필요\n//       });\n//       if (response.status === 200) {\n//         setPaymentResult(\"주문이 성공적으로 처리되었습니다.\");\n//       }\n//     } catch (error) {\n//       console.error(\"주문 처리 중 오류가 발생했습니다.\", error);\n//       setPaymentResult(\"주문 처리 중 오류가 발생했습니다.\");\n//     }\n//   };\n\n//   return (\n//     <div className=\"app\">\n//       {/* 렌더링 및 입력 폼 코드 */}\n//       <div className=\"order-form\">\n//         <h2>주문 및 결제</h2>\n//         <input\n//           type=\"text\"\n//           name=\"deliveryAddress\"\n//           placeholder=\"배송지\"\n//           onChange={handleInputChange}\n//         />\n//         <input\n//           type=\"text\"\n//           name=\"recipient\"\n//           placeholder=\"받는 사람\"\n//           onChange={handleInputChange}\n//         />\n//         <input\n//           type=\"text\"\n//           name=\"deliveryInstruction\"\n//           placeholder=\"배송 요청사항\"\n//           onChange={handleInputChange}\n//         />\n//         <select name=\"paymentMethodId\" onChange={handleInputChange}>\n//           <option value=\"\">결제 수단 선택</option>\n//           <option value=\"1\">신용카드</option>\n//           <option value=\"2\">계좌이체</option>\n//           <option value=\"3\">기타</option>\n//         </select>\n//         <div className=\"order-form\">\n//           <h3>상품 정보</h3>\n//           <div className=\"product-info\">\n//             {product.product_name ? ( // productName이 존재하는 경우에만 상품 정보 렌더링\n//               <>\n//                 <h2>{product.product_name}</h2>\n//                 <p>가격: ${product.product_price}</p>\n//                 <p>색상: {product.product_color}</p>\n//                 <p>사이즈: {product.product_size}</p>\n//               </>\n//             ) : (\n//               <p>상품 정보를 불러오는 중...</p> // 상품 정보가 아직 로드되지 않았을 경우\n//             )}\n//           </div>\n//           <div className=\"payment-button\">\n//             <button onClick={submitOrder}>주문하기</button>\n//           </div>\n//           {paymentResult && <p>{paymentResult}</p>}\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default App;\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport \"./App.css\";\n// API URL 설정파일 불러오기\nimport API_URL from \"./config\";\n\nconst App = () => {\n  // 주문 정보와 결제 결과를 관리하는 상태\n  const [orderInfo, setOrderInfo] = useState({\n    deliveryAddress: \"\",\n    recipient: \"\",\n    deliveryInstruction: \"\",\n    paymentMethodId: \"\",\n  });\n  const [product, setProducts] = useState([]);\n  const [paymentResult, setPaymentResult] = useState(\"\");\n\n  // 상품 정보를 불러오는 효과\n  useEffect(() => {\n    const fetchProducts = async () => {\n      try {\n        const response = await axios.get(`${API_URL}/product`);\n        setProducts(\n          response.data.map((product) => ({ ...product, quantity: 1 }))\n        ); // 모든 상품에 대해 초기 수량을 1로 설정\n      } catch (error) {\n        console.error(\"Error fetching product:\", error);\n      }\n    };\n\n    fetchProducts();\n  }, []);\n\n  console.log(\"product.name\", product.name);\n\n  // 주문 정보 변경 처리 함수\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    setOrderInfo({ ...orderInfo, [name]: value });\n  };\n\n  // 상품 수량 변경 처리 함수\n  const handleQuantityChange = (index, quantity) => {\n    const updatedProducts = [...product];\n    updatedProducts[index].quantity = quantity;\n    setProducts(updatedProducts);\n  };\n\n  // 주문 제출 처리 함수\n  const submitOrder = async () => {\n    try {\n      const orderData = {\n        ...orderInfo,\n        products: product.map((product) => ({\n          productId: product.id,\n          quantity: product.quantity,\n        })),\n      };\n      const response = await axios.post(`${API_URL}/Order`, orderData);\n      if (response.status === 200) {\n        setPaymentResult(\"Order has been successfully processed.\");\n      } else {\n        setPaymentResult(\"There was a problem processing your order.\");\n      }\n    } catch (error) {\n      console.error(\"Order submission error:\", error);\n      setPaymentResult(\"Error processing order.\");\n    }\n  };\n\n  return (\n    <div className=\"app\">\n      {/* 주문 정보 입력 폼 */}\n      <div>\n        <h2>배송지</h2>\n        <input\n          type=\"text\"\n          name=\"deliveryAddress\"\n          placeholder=\"Delivery Address\"\n          onChange={handleInputChange}\n        />\n        <input\n          type=\"text\"\n          name=\"recipient\"\n          placeholder=\"Recipient\"\n          onChange={handleInputChange}\n        />\n        <input\n          type=\"text\"\n          name=\"deliveryInstruction\"\n          placeholder=\"Delivery Instructions\"\n          onChange={handleInputChange}\n        />\n        {/* 상품 목록 */}\n        <h3>상품 목록</h3>\n        {product.map((product, index) => (\n          <div key={product.id}>\n            <span>\n              {product.product_name} - ${product.product_price}\n            </span>\n            <input\n              type=\"number\"\n              value={product.product_quantity}\n              onChange={(e) =>\n                handleQuantityChange(index, parseInt(e.target.value, 10))\n              }\n              min=\"1\"\n            />\n          </div>\n        ))}\n        <button onClick={submitOrder}>Submit Order</button>\n      </div>\n      {paymentResult && <div>{paymentResult}</div>}\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":";;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAO,WAAW;AAClB;AACA,OAAOC,OAAO,MAAM,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/B,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB;EACA,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC;IACzCU,eAAe,EAAE,EAAE;IACnBC,SAAS,EAAE,EAAE;IACbC,mBAAmB,EAAE,EAAE;IACvBC,eAAe,EAAE;EACnB,CAAC,CAAC;EACF,MAAM,CAACC,OAAO,EAAEC,WAAW,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAC3C,MAAM,CAACgB,aAAa,EAAEC,gBAAgB,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;;EAEtD;EACAC,SAAS,CAAC,MAAM;IACd,MAAMiB,aAAa,GAAG,MAAAA,CAAA,KAAY;MAChC,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMjB,KAAK,CAACkB,GAAG,CAAE,GAAEjB,OAAQ,UAAS,CAAC;QACtDY,WAAW,CACTI,QAAQ,CAACE,IAAI,CAA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}