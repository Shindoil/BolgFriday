{"ast":null,"code":"var _jsxFileName = \"D:\\\\ai_chat\\\\react-workspace\\\\blogfriday\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from \"react\";\n// import axios from \"axios\";\n// import API_URL from \"./config\";\n// import \"./App.css\";\n\n// const App = () => {\n//   const [orderInfo, setOrderInfo] = useState({\n//     deliveryAddress: \"\",\n//     recipient: \"\",\n//     deliveryInstruction: \"\",\n//     paymentMethodId: \"\",\n//   });\n\n//   // products를 배열에서 객체로 변경\n//   const [product, setProduct] = useState({});\n//   console.log(product.productName);\n//   const [paymentResult, setPaymentResult] = useState(\"\");\n\n//   useEffect(() => {\n//     const fetchProduct = async () => {\n//       try {\n//         const response = await axios.get(`${API_URL}/product/content/3`);\n//         setProduct(response.data);\n//       } catch (error) {\n//         console.error(\"상품 데이터를 불러오는 중 오류가 발생했습니다:\", error);\n//       }\n//     };\n//     fetchProduct();\n//   }, []);\n\n//   console.log(\"현재 상품 상태:\", product.product_name);\n\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setOrderInfo({ ...orderInfo, [name]: value });\n//   };\n\n//   const submitOrder = async () => {\n// try {\n//   const response = await axios.post(`${API_URL}/orders`, {\n//     ...orderInfo,\n//     products: [\n//       {\n//         productId: product.productId,\n//         quantity: 1, // 예시로 1을 사용, 실제 양식에 맞게 수정 필요\n//       },\n//     ],\n//     orderAmount: product.productPrice, // 예시로 productPrice 사용, 실제 계산 로직 필요\n//   });\n//   if (response.status === 200) {\n//     setPaymentResult(\"주문이 성공적으로 처리되었습니다.\");\n//   }\n// } catch (error) {\n//   console.error(\"주문 처리 중 오류가 발생했습니다.\", error);\n//   setPaymentResult(\"주문 처리 중 오류가 발생했습니다.\");\n// }\n//   };\n\n//   return (\n//     <div className=\"app\">\n//       {/* 렌더링 및 입력 폼 코드 */}\n// <div className=\"order-form\">\n//   <h2>주문 및 결제</h2>\n//   <input\n//     type=\"text\"\n//     name=\"deliveryAddress\"\n//     placeholder=\"배송지\"\n//     onChange={handleInputChange}\n//   />\n//   <input\n//     type=\"text\"\n//     name=\"recipient\"\n//     placeholder=\"받는 사람\"\n//     onChange={handleInputChange}\n//   />\n//   <input\n//     type=\"text\"\n//     name=\"deliveryInstruction\"\n//     placeholder=\"배송 요청사항\"\n//     onChange={handleInputChange}\n//   />\n//   <select name=\"paymentMethodId\" onChange={handleInputChange}>\n//     <option value=\"\">결제 수단 선택</option>\n//     <option value=\"1\">신용카드</option>\n//     <option value=\"2\">계좌이체</option>\n//     <option value=\"3\">기타</option>\n//   </select>\n//         <div className=\"order-form\">\n//           <h3>상품 정보</h3>\n//           <div className=\"product-info\">\n//             {product.product_name ? ( // productName이 존재하는 경우에만 상품 정보 렌더링\n//               <>\n//                 <h2>{product.product_name}</h2>\n//                 <p>가격: ${product.product_price}</p>\n//                 <p>색상: {product.product_color}</p>\n//                 <p>사이즈: {product.product_size}</p>\n//               </>\n//             ) : (\n//               <p>상품 정보를 불러오는 중...</p> // 상품 정보가 아직 로드되지 않았을 경우\n//             )}\n//           </div>\n//           <div className=\"payment-button\">\n//             <button onClick={submitOrder}>주문하기</button>\n//           </div>\n//           {paymentResult && <p>{paymentResult}</p>}\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default App;\n// import React, { useState, useEffect } from \"react\";\n// import axios from \"axios\";\n// import \"./App.css\";\n\n// // 설정 파일로부터 API URL 불러오기\n// const API_URL = \"http://localhost:8090\";\n\n// const App = () => {\n//   const [Orders, setOrderInfo] = useState({\n//     deliveryAddress: \"\",\n//     deliveryInstruction: \"\",\n//     quantity: 1,\n//   });\n//   const [product, setProduct] = useState(null);\n//   const [paymentResult, setPaymentResult] = useState(\"\");\n\n//   useEffect(() => {\n//     const fetchProduct = async () => {\n//       try {\n//         const response = await axios.get(`${API_URL}/product/content/3`);\n//         setProduct(response.data);\n//       } catch (error) {\n//         console.error(\"Error fetching product:\", error);\n//       }\n//     };\n//     fetchProduct();\n//   }, []);\n\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setOrderInfo((prev) => ({ ...prev, [name]: value }));\n//   };\n\n//   const handleQuantityChange = (e) => {\n//     setOrderInfo((prev) => ({\n//       ...prev,\n//       quantity: parseInt(e.target.value, 10) || 1,\n//     }));\n//   };\n\n//   const submitOrder = async () => {\n//     try {\n//       const orderAmount = product.product_price * Orders.quantity;\n//       const response = await axios.post(`${API_URL}/orders`, {\n//         ...Orders,\n//         products: [\n//           { productId: product.product_code, quantity: Orders.quantity },\n//         ],\n//         orderAmount,\n//       });\n//       if (response.status === 200) {\n//         setPaymentResult(\"주문이 성공적으로 처리되었습니다.\");\n//       } else {\n//         setPaymentResult(\"주문 처리에 실패했습니다.\");\n//       }\n//     } catch (error) {\n//       console.error(\"주문 처리 중 오류가 발생했습니다.\", error);\n//       setPaymentResult(\"주문 처리 중 오류가 발생했습니다.\");\n//     }\n//   };\n\n//   return (\n//     <div className=\"app\">\n//       <div className=\"order-form\">\n//         <h2>주문 및 결제</h2>\n//         <input\n//           type=\"text\"\n//           name=\"deliveryAddress\"\n//           placeholder=\"배송지\"\n//           value={Orders.deliveryAddress}\n//           onChange={handleInputChange}\n//         />\n//         <input\n//           type=\"text\"\n//           name=\"recipient\"\n//           placeholder=\"받는 사람\"\n//           value={Orders.recipient}\n//           onChange={handleInputChange}\n//         />\n//         <input\n//           type=\"text\"\n//           name=\"deliveryInstruction\"\n//           placeholder=\"배송 요청사항\"\n//           value={Orders.deliveryInstruction}\n//           onChange={handleInputChange}\n//         />\n\n//         {product && (\n//           <div className=\"product-info\">\n//             <h3>상품 정보</h3>\n//             <p>제품명: {product.product_name}</p>\n//             <p>가격: ${product.product_price}</p>\n//             <label>\n//               수량 선택:\n//               <input\n//                 type=\"number\"\n//                 name=\"quantity\"\n//                 value={Orders.quantity}\n//                 onChange={handleQuantityChange}\n//               />\n//             </label>\n//             <p>총 금액: ${product.product_price * Orders.quantity}</p>\n//           </div>\n//         )}\n//         <button onClick={submitOrder}>주문하기</button>\n//       </div>\n//       {paymentResult && <p>{paymentResult}</p>}\n//     </div>\n//   );\n// };\n\n// export default App;\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst API_URL = \"http://localhost:8090\";\nconst App = () => {\n  _s();\n  const [products, setProducts] = useState([]);\n  const [selectedProduct, setSelectedProduct] = useState({});\n  const [quantity, setQuantity] = useState(1);\n  const [orderInfo, setOrderInfo] = useState({\n    deliveryAddress: \"\",\n    deliveryInstruction: \"\"\n  });\n  const [paymentResult, setPaymentResult] = useState(\"\");\n  useEffect(() => {\n    // 상품 목록을 불러오는 부분\n    const fetchProducts = async () => {\n      try {\n        const response = await axios.get(`${API_URL}/product`);\n        setProducts(response.data);\n      } catch (error) {\n        console.error(\"상품을 불러오는 중 오류가 발생했습니다:\", error);\n      }\n    };\n    fetchProducts();\n  }, []);\n  const handleProductSelect = product_id => {\n    const product = products.find(p => p.product_id === product_id);\n    setSelectedProduct(product);\n  };\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setOrderInfo(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n  const handleQuantityChange = e => {\n    setQuantity(parseInt(e.target.value, 10));\n  };\n  const submitOrder = async () => {\n    try {\n      const orderPayload = {\n        user_id: 1,\n        // 예시입니다. 실제 구현에서는 인증된 사용자 ID를 사용해야 합니다.\n        order_date: new Date().toISOString(),\n        order_address: orderInfo.deliveryAddress,\n        order_amount: selectedProduct.product_price * quantity,\n        product_id: selectedProduct.product_id,\n        quantity\n      };\n      const response = await axios.post(`${API_URL}/orders`, orderPayload);\n      if (response.status === 201) {\n        setPaymentResult(\"주문이 성공적으로 처리되었습니다.\");\n      }\n    } catch (error) {\n      console.error(\"주문 처리 중 오류가 발생했습니다.\", error);\n      setPaymentResult(\"주문 처리 중 오류가 발생했습니다.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\uC0C1\\uD488 \\uBAA9\\uB85D\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 7\n    }, this), products.map(product => /*#__PURE__*/_jsxDEV(\"div\", {\n      onClick: () => handleProductSelect(product.product_id),\n      children: [product.product_name, \" - $\", product.product_price]\n    }, product.product_id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 9\n    }, this)), selectedProduct.product_id && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"\\uC120\\uD0DD\\uD55C \\uC0C1\\uD488: \", selectedProduct.product_name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"\\uAC00\\uACA9: $\", selectedProduct.product_price]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"\\uC218\\uB7C9:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          value: quantity,\n          onChange: handleQuantityChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"deliveryAddress\",\n        placeholder: \"\\uBC30\\uC1A1\\uC9C0 \\uC8FC\\uC18C\",\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"deliveryInstruction\",\n        placeholder: \"\\uBC30\\uC1A1 \\uC694\\uCCAD \\uC0AC\\uD56D\",\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: submitOrder,\n        children: \"\\uC8FC\\uBB38\\uD558\\uAE30\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 11\n      }, this), paymentResult && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: paymentResult\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 29\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 293,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"8gouxRqGotWWfH3iNwfHT8Xy9eY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","API_URL","App","_s","products","setProducts","selectedProduct","setSelectedProduct","quantity","setQuantity","orderInfo","setOrderInfo","deliveryAddress","deliveryInstruction","paymentResult","setPaymentResult","fetchProducts","response","get","data","error","console","handleProductSelect","product_id","product","find","p","handleChange","e","name","value","target","prev","handleQuantityChange","parseInt","submitOrder","orderPayload","user_id","order_date","Date","toISOString","order_address","order_amount","product_price","post","status","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","onClick","product_name","type","onChange","placeholder","_c","$RefreshReg$"],"sources":["D:/ai_chat/react-workspace/blogfriday/src/App.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\n// import axios from \"axios\";\n// import API_URL from \"./config\";\n// import \"./App.css\";\n\n// const App = () => {\n//   const [orderInfo, setOrderInfo] = useState({\n//     deliveryAddress: \"\",\n//     recipient: \"\",\n//     deliveryInstruction: \"\",\n//     paymentMethodId: \"\",\n//   });\n\n//   // products를 배열에서 객체로 변경\n//   const [product, setProduct] = useState({});\n//   console.log(product.productName);\n//   const [paymentResult, setPaymentResult] = useState(\"\");\n\n//   useEffect(() => {\n//     const fetchProduct = async () => {\n//       try {\n//         const response = await axios.get(`${API_URL}/product/content/3`);\n//         setProduct(response.data);\n//       } catch (error) {\n//         console.error(\"상품 데이터를 불러오는 중 오류가 발생했습니다:\", error);\n//       }\n//     };\n//     fetchProduct();\n//   }, []);\n\n//   console.log(\"현재 상품 상태:\", product.product_name);\n\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setOrderInfo({ ...orderInfo, [name]: value });\n//   };\n\n//   const submitOrder = async () => {\n// try {\n//   const response = await axios.post(`${API_URL}/orders`, {\n//     ...orderInfo,\n//     products: [\n//       {\n//         productId: product.productId,\n//         quantity: 1, // 예시로 1을 사용, 실제 양식에 맞게 수정 필요\n//       },\n//     ],\n//     orderAmount: product.productPrice, // 예시로 productPrice 사용, 실제 계산 로직 필요\n//   });\n//   if (response.status === 200) {\n//     setPaymentResult(\"주문이 성공적으로 처리되었습니다.\");\n//   }\n// } catch (error) {\n//   console.error(\"주문 처리 중 오류가 발생했습니다.\", error);\n//   setPaymentResult(\"주문 처리 중 오류가 발생했습니다.\");\n// }\n//   };\n\n//   return (\n//     <div className=\"app\">\n//       {/* 렌더링 및 입력 폼 코드 */}\n// <div className=\"order-form\">\n//   <h2>주문 및 결제</h2>\n//   <input\n//     type=\"text\"\n//     name=\"deliveryAddress\"\n//     placeholder=\"배송지\"\n//     onChange={handleInputChange}\n//   />\n//   <input\n//     type=\"text\"\n//     name=\"recipient\"\n//     placeholder=\"받는 사람\"\n//     onChange={handleInputChange}\n//   />\n//   <input\n//     type=\"text\"\n//     name=\"deliveryInstruction\"\n//     placeholder=\"배송 요청사항\"\n//     onChange={handleInputChange}\n//   />\n//   <select name=\"paymentMethodId\" onChange={handleInputChange}>\n//     <option value=\"\">결제 수단 선택</option>\n//     <option value=\"1\">신용카드</option>\n//     <option value=\"2\">계좌이체</option>\n//     <option value=\"3\">기타</option>\n//   </select>\n//         <div className=\"order-form\">\n//           <h3>상품 정보</h3>\n//           <div className=\"product-info\">\n//             {product.product_name ? ( // productName이 존재하는 경우에만 상품 정보 렌더링\n//               <>\n//                 <h2>{product.product_name}</h2>\n//                 <p>가격: ${product.product_price}</p>\n//                 <p>색상: {product.product_color}</p>\n//                 <p>사이즈: {product.product_size}</p>\n//               </>\n//             ) : (\n//               <p>상품 정보를 불러오는 중...</p> // 상품 정보가 아직 로드되지 않았을 경우\n//             )}\n//           </div>\n//           <div className=\"payment-button\">\n//             <button onClick={submitOrder}>주문하기</button>\n//           </div>\n//           {paymentResult && <p>{paymentResult}</p>}\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default App;\n// import React, { useState, useEffect } from \"react\";\n// import axios from \"axios\";\n// import \"./App.css\";\n\n// // 설정 파일로부터 API URL 불러오기\n// const API_URL = \"http://localhost:8090\";\n\n// const App = () => {\n//   const [Orders, setOrderInfo] = useState({\n//     deliveryAddress: \"\",\n//     deliveryInstruction: \"\",\n//     quantity: 1,\n//   });\n//   const [product, setProduct] = useState(null);\n//   const [paymentResult, setPaymentResult] = useState(\"\");\n\n//   useEffect(() => {\n//     const fetchProduct = async () => {\n//       try {\n//         const response = await axios.get(`${API_URL}/product/content/3`);\n//         setProduct(response.data);\n//       } catch (error) {\n//         console.error(\"Error fetching product:\", error);\n//       }\n//     };\n//     fetchProduct();\n//   }, []);\n\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setOrderInfo((prev) => ({ ...prev, [name]: value }));\n//   };\n\n//   const handleQuantityChange = (e) => {\n//     setOrderInfo((prev) => ({\n//       ...prev,\n//       quantity: parseInt(e.target.value, 10) || 1,\n//     }));\n//   };\n\n//   const submitOrder = async () => {\n//     try {\n//       const orderAmount = product.product_price * Orders.quantity;\n//       const response = await axios.post(`${API_URL}/orders`, {\n//         ...Orders,\n//         products: [\n//           { productId: product.product_code, quantity: Orders.quantity },\n//         ],\n//         orderAmount,\n//       });\n//       if (response.status === 200) {\n//         setPaymentResult(\"주문이 성공적으로 처리되었습니다.\");\n//       } else {\n//         setPaymentResult(\"주문 처리에 실패했습니다.\");\n//       }\n//     } catch (error) {\n//       console.error(\"주문 처리 중 오류가 발생했습니다.\", error);\n//       setPaymentResult(\"주문 처리 중 오류가 발생했습니다.\");\n//     }\n//   };\n\n//   return (\n//     <div className=\"app\">\n//       <div className=\"order-form\">\n//         <h2>주문 및 결제</h2>\n//         <input\n//           type=\"text\"\n//           name=\"deliveryAddress\"\n//           placeholder=\"배송지\"\n//           value={Orders.deliveryAddress}\n//           onChange={handleInputChange}\n//         />\n//         <input\n//           type=\"text\"\n//           name=\"recipient\"\n//           placeholder=\"받는 사람\"\n//           value={Orders.recipient}\n//           onChange={handleInputChange}\n//         />\n//         <input\n//           type=\"text\"\n//           name=\"deliveryInstruction\"\n//           placeholder=\"배송 요청사항\"\n//           value={Orders.deliveryInstruction}\n//           onChange={handleInputChange}\n//         />\n\n//         {product && (\n//           <div className=\"product-info\">\n//             <h3>상품 정보</h3>\n//             <p>제품명: {product.product_name}</p>\n//             <p>가격: ${product.product_price}</p>\n//             <label>\n//               수량 선택:\n//               <input\n//                 type=\"number\"\n//                 name=\"quantity\"\n//                 value={Orders.quantity}\n//                 onChange={handleQuantityChange}\n//               />\n//             </label>\n//             <p>총 금액: ${product.product_price * Orders.quantity}</p>\n//           </div>\n//         )}\n//         <button onClick={submitOrder}>주문하기</button>\n//       </div>\n//       {paymentResult && <p>{paymentResult}</p>}\n//     </div>\n//   );\n// };\n\n// export default App;\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport \"./App.css\";\n\nconst API_URL = \"http://localhost:8090\";\n\nconst App = () => {\n  const [products, setProducts] = useState([]);\n  const [selectedProduct, setSelectedProduct] = useState({});\n  const [quantity, setQuantity] = useState(1);\n  const [orderInfo, setOrderInfo] = useState({\n    deliveryAddress: \"\",\n    deliveryInstruction: \"\",\n  });\n  const [paymentResult, setPaymentResult] = useState(\"\");\n\n  useEffect(() => {\n    // 상품 목록을 불러오는 부분\n    const fetchProducts = async () => {\n      try {\n        const response = await axios.get(`${API_URL}/product`);\n        setProducts(response.data);\n      } catch (error) {\n        console.error(\"상품을 불러오는 중 오류가 발생했습니다:\", error);\n      }\n    };\n    fetchProducts();\n  }, []);\n\n  const handleProductSelect = (product_id) => {\n    const product = products.find((p) => p.product_id === product_id);\n    setSelectedProduct(product);\n  };\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setOrderInfo((prev) => ({\n      ...prev,\n      [name]: value,\n    }));\n  };\n\n  const handleQuantityChange = (e) => {\n    setQuantity(parseInt(e.target.value, 10));\n  };\n\n  const submitOrder = async () => {\n    try {\n      const orderPayload = {\n        user_id: 1, // 예시입니다. 실제 구현에서는 인증된 사용자 ID를 사용해야 합니다.\n        order_date: new Date().toISOString(),\n        order_address: orderInfo.deliveryAddress,\n        order_amount: selectedProduct.product_price * quantity,\n        product_id: selectedProduct.product_id,\n        quantity,\n      };\n\n      const response = await axios.post(`${API_URL}/orders`, orderPayload);\n      if (response.status === 201) {\n        setPaymentResult(\"주문이 성공적으로 처리되었습니다.\");\n      }\n    } catch (error) {\n      console.error(\"주문 처리 중 오류가 발생했습니다.\", error);\n      setPaymentResult(\"주문 처리 중 오류가 발생했습니다.\");\n    }\n  };\n\n  return (\n    <div className=\"app\">\n      <h1>상품 목록</h1>\n      {products.map((product) => (\n        <div\n          key={product.product_id}\n          onClick={() => handleProductSelect(product.product_id)}\n        >\n          {product.product_name} - ${product.product_price}\n        </div>\n      ))}\n\n      {selectedProduct.product_id && (\n        <>\n          <h2>선택한 상품: {selectedProduct.product_name}</h2>\n          <p>가격: ${selectedProduct.product_price}</p>\n          <p>\n            수량:\n            <input\n              type=\"number\"\n              value={quantity}\n              onChange={handleQuantityChange}\n            />\n          </p>\n          <input\n            type=\"text\"\n            name=\"deliveryAddress\"\n            placeholder=\"배송지 주소\"\n            onChange={handleChange}\n          />\n          <input\n            type=\"text\"\n            name=\"deliveryInstruction\"\n            placeholder=\"배송 요청 사항\"\n            onChange={handleChange}\n          />\n          <button onClick={submitOrder}>주문하기</button>\n          {paymentResult && <p>{paymentResult}</p>}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":";;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEnB,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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}