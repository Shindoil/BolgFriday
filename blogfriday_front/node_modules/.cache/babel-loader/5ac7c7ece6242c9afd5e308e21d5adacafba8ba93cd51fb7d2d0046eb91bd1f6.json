{"ast":null,"code":"var _jsxFileName = \"D:\\\\ai_chat\\\\react-workspace\\\\blogfriday\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from \"react\";\n// import axios from \"axios\";\n// import API_URL from \"./config\";\n// import \"./App.css\";\n\n// const App = () => {\n//   const [orderInfo, setOrderInfo] = useState({\n//     deliveryAddress: \"\",\n//     recipient: \"\",\n//     deliveryInstruction: \"\",\n//     paymentMethodId: \"\",\n//   });\n\n//   // products를 배열에서 객체로 변경\n//   const [product, setProduct] = useState({});\n//   console.log(product.productName);\n//   const [paymentResult, setPaymentResult] = useState(\"\");\n\n//   useEffect(() => {\n//     const fetchProduct = async () => {\n//       try {\n//         const response = await axios.get(`${API_URL}/product/content/3`);\n//         setProduct(response.data);\n//       } catch (error) {\n//         console.error(\"상품 데이터를 불러오는 중 오류가 발생했습니다:\", error);\n//       }\n//     };\n//     fetchProduct();\n//   }, []);\n\n//   console.log(\"현재 상품 상태:\", product.product_name);\n\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setOrderInfo({ ...orderInfo, [name]: value });\n//   };\n\n//   const submitOrder = async () => {\n//     try {\n//       const response = await axios.post(`${API_URL}/orders`, {\n//         ...orderInfo,\n//         products: [\n//           {\n//             productId: product.productId,\n//             quantity: 1, // 예시로 1을 사용, 실제 양식에 맞게 수정 필요\n//           },\n//         ],\n//         orderAmount: product.productPrice, // 예시로 productPrice 사용, 실제 계산 로직 필요\n//       });\n//       if (response.status === 200) {\n//         setPaymentResult(\"주문이 성공적으로 처리되었습니다.\");\n//       }\n//     } catch (error) {\n//       console.error(\"주문 처리 중 오류가 발생했습니다.\", error);\n//       setPaymentResult(\"주문 처리 중 오류가 발생했습니다.\");\n//     }\n//   };\n\n//   return (\n//     <div className=\"app\">\n//       {/* 렌더링 및 입력 폼 코드 */}\n//       <div className=\"order-form\">\n//         <h2>주문 및 결제</h2>\n//         <input\n//           type=\"text\"\n//           name=\"deliveryAddress\"\n//           placeholder=\"배송지\"\n//           onChange={handleInputChange}\n//         />\n//         <input\n//           type=\"text\"\n//           name=\"recipient\"\n//           placeholder=\"받는 사람\"\n//           onChange={handleInputChange}\n//         />\n//         <input\n//           type=\"text\"\n//           name=\"deliveryInstruction\"\n//           placeholder=\"배송 요청사항\"\n//           onChange={handleInputChange}\n//         />\n//         <select name=\"paymentMethodId\" onChange={handleInputChange}>\n//           <option value=\"\">결제 수단 선택</option>\n//           <option value=\"1\">신용카드</option>\n//           <option value=\"2\">계좌이체</option>\n//           <option value=\"3\">기타</option>\n//         </select>\n//         <div className=\"order-form\">\n//           <h3>상품 정보</h3>\n//           <div className=\"product-info\">\n//             {product.product_name ? ( // productName이 존재하는 경우에만 상품 정보 렌더링\n//               <>\n//                 <h2>{product.product_name}</h2>\n//                 <p>가격: ${product.product_price}</p>\n//                 <p>색상: {product.product_color}</p>\n//                 <p>사이즈: {product.product_size}</p>\n//               </>\n//             ) : (\n//               <p>상품 정보를 불러오는 중...</p> // 상품 정보가 아직 로드되지 않았을 경우\n//             )}\n//           </div>\n//           <div className=\"payment-button\">\n//             <button onClick={submitOrder}>주문하기</button>\n//           </div>\n//           {paymentResult && <p>{paymentResult}</p>}\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default App;\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = \"http://localhost:8090\"; // API 주소 설정\n\nconst App = () => {\n  _s();\n  const [orderInfo, setOrderInfo] = useState({\n    deliveryAddress: \"\",\n    recipient: \"\",\n    deliveryInstruction: \"\"\n  });\n\n  // 상품 목록과 각 상품에 대한 수량을 관리하는 상태\n  const [products, setProducts] = useState([]);\n  const [paymentResult, setPaymentResult] = useState(\"\");\n\n  // 상품 목록을 불러오는 함수\n  useEffect(() => {\n    fetchProducts();\n  }, []);\n  const fetchProducts = async () => {\n    try {\n      // 상품 목록을 불러오는 API 호출\n      const response = await axios.get(`${API_URL}/product`);\n      const fetchedProducts = response.data.map(product => ({\n        ...product,\n        quantity: 1 // 기본 수량을 1로 설정\n      }));\n      setProducts(fetchedProducts);\n    } catch (error) {\n      console.error(\"상품 데이터를 불러오는 중 오류가 발생했습니다.\", error);\n    }\n  };\n\n  // 주문 정보 입력 처리 함수\n  const handleOrderInfoChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setOrderInfo(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n\n  // 상품 수량 변경 처리 함수\n  const handleQuantityChange = (index, quantity) => {\n    const updatedProducts = [...products];\n    updatedProducts[index].quantity = quantity;\n    setProducts(updatedProducts);\n  };\n\n  // 주문 제출 함수\n  const submitOrder = async () => {\n    try {\n      const orderDetails = {\n        ...orderInfo,\n        products: products.map(({\n          id,\n          quantity\n        }) => ({\n          productId: id,\n          quantity\n        }))\n      };\n      const response = await axios.post(`${API_URL}/orders`, orderDetails);\n      if (response.status === 200) {\n        setPaymentResult(\"주문이 성공적으로 처리되었습니다.\");\n      } else {\n        setPaymentResult(\"주문 처리 중 오류가 발생했습니다.\");\n      }\n    } catch (error) {\n      console.error(\"주문 처리 중 오류가 발생했습니다.\", error);\n      setPaymentResult(\"주문 처리 중 오류가 발생했습니다.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"order-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"\\uC0C1\\uD488 \\uBAA9\\uB85D\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 9\n      }, this), products.map((product, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"product\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: [product.name, \" - \", product.price, \"\\uC6D0\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"\\uC218\\uB7C9:\", \" \", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            value: product.quantity,\n            onChange: e => handleProductQuantityChange(index, e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"payment-button\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: submitOrder,\n        children: \"\\uC8FC\\uBB38\\uD558\\uAE30\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 7\n    }, this), paymentResult && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: paymentResult\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 25\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 186,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"B1hZQ/1zkEitw6QI0lOmFt/7PPw=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","API_URL","App","_s","orderInfo","setOrderInfo","deliveryAddress","recipient","deliveryInstruction","products","setProducts","paymentResult","setPaymentResult","fetchProducts","response","get","fetchedProducts","data","map","product","quantity","error","console","handleOrderInfoChange","e","name","value","target","prev","handleQuantityChange","index","updatedProducts","submitOrder","orderDetails","id","productId","post","status","className","children","fileName","_jsxFileName","lineNumber","columnNumber","price","type","onChange","handleProductQuantityChange","onClick","_c","$RefreshReg$"],"sources":["D:/ai_chat/react-workspace/blogfriday/src/App.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\n// import axios from \"axios\";\n// import API_URL from \"./config\";\n// import \"./App.css\";\n\n// const App = () => {\n//   const [orderInfo, setOrderInfo] = useState({\n//     deliveryAddress: \"\",\n//     recipient: \"\",\n//     deliveryInstruction: \"\",\n//     paymentMethodId: \"\",\n//   });\n\n//   // products를 배열에서 객체로 변경\n//   const [product, setProduct] = useState({});\n//   console.log(product.productName);\n//   const [paymentResult, setPaymentResult] = useState(\"\");\n\n//   useEffect(() => {\n//     const fetchProduct = async () => {\n//       try {\n//         const response = await axios.get(`${API_URL}/product/content/3`);\n//         setProduct(response.data);\n//       } catch (error) {\n//         console.error(\"상품 데이터를 불러오는 중 오류가 발생했습니다:\", error);\n//       }\n//     };\n//     fetchProduct();\n//   }, []);\n\n//   console.log(\"현재 상품 상태:\", product.product_name);\n\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setOrderInfo({ ...orderInfo, [name]: value });\n//   };\n\n//   const submitOrder = async () => {\n//     try {\n//       const response = await axios.post(`${API_URL}/orders`, {\n//         ...orderInfo,\n//         products: [\n//           {\n//             productId: product.productId,\n//             quantity: 1, // 예시로 1을 사용, 실제 양식에 맞게 수정 필요\n//           },\n//         ],\n//         orderAmount: product.productPrice, // 예시로 productPrice 사용, 실제 계산 로직 필요\n//       });\n//       if (response.status === 200) {\n//         setPaymentResult(\"주문이 성공적으로 처리되었습니다.\");\n//       }\n//     } catch (error) {\n//       console.error(\"주문 처리 중 오류가 발생했습니다.\", error);\n//       setPaymentResult(\"주문 처리 중 오류가 발생했습니다.\");\n//     }\n//   };\n\n//   return (\n//     <div className=\"app\">\n//       {/* 렌더링 및 입력 폼 코드 */}\n//       <div className=\"order-form\">\n//         <h2>주문 및 결제</h2>\n//         <input\n//           type=\"text\"\n//           name=\"deliveryAddress\"\n//           placeholder=\"배송지\"\n//           onChange={handleInputChange}\n//         />\n//         <input\n//           type=\"text\"\n//           name=\"recipient\"\n//           placeholder=\"받는 사람\"\n//           onChange={handleInputChange}\n//         />\n//         <input\n//           type=\"text\"\n//           name=\"deliveryInstruction\"\n//           placeholder=\"배송 요청사항\"\n//           onChange={handleInputChange}\n//         />\n//         <select name=\"paymentMethodId\" onChange={handleInputChange}>\n//           <option value=\"\">결제 수단 선택</option>\n//           <option value=\"1\">신용카드</option>\n//           <option value=\"2\">계좌이체</option>\n//           <option value=\"3\">기타</option>\n//         </select>\n//         <div className=\"order-form\">\n//           <h3>상품 정보</h3>\n//           <div className=\"product-info\">\n//             {product.product_name ? ( // productName이 존재하는 경우에만 상품 정보 렌더링\n//               <>\n//                 <h2>{product.product_name}</h2>\n//                 <p>가격: ${product.product_price}</p>\n//                 <p>색상: {product.product_color}</p>\n//                 <p>사이즈: {product.product_size}</p>\n//               </>\n//             ) : (\n//               <p>상품 정보를 불러오는 중...</p> // 상품 정보가 아직 로드되지 않았을 경우\n//             )}\n//           </div>\n//           <div className=\"payment-button\">\n//             <button onClick={submitOrder}>주문하기</button>\n//           </div>\n//           {paymentResult && <p>{paymentResult}</p>}\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default App;\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport \"./App.css\";\n\nconst API_URL = \"http://localhost:8090\"; // API 주소 설정\n\nconst App = () => {\n  const [orderInfo, setOrderInfo] = useState({\n    deliveryAddress: \"\",\n    recipient: \"\",\n    deliveryInstruction: \"\",\n  });\n\n  // 상품 목록과 각 상품에 대한 수량을 관리하는 상태\n  const [products, setProducts] = useState([]);\n\n  const [paymentResult, setPaymentResult] = useState(\"\");\n\n  // 상품 목록을 불러오는 함수\n  useEffect(() => {\n    fetchProducts();\n  }, []);\n\n  const fetchProducts = async () => {\n    try {\n      // 상품 목록을 불러오는 API 호출\n      const response = await axios.get(`${API_URL}/product`);\n      const fetchedProducts = response.data.map((product) => ({\n        ...product,\n        quantity: 1, // 기본 수량을 1로 설정\n      }));\n      setProducts(fetchedProducts);\n    } catch (error) {\n      console.error(\"상품 데이터를 불러오는 중 오류가 발생했습니다.\", error);\n    }\n  };\n\n  // 주문 정보 입력 처리 함수\n  const handleOrderInfoChange = (e) => {\n    const { name, value } = e.target;\n    setOrderInfo((prev) => ({ ...prev, [name]: value }));\n  };\n\n  // 상품 수량 변경 처리 함수\n  const handleQuantityChange = (index, quantity) => {\n    const updatedProducts = [...products];\n    updatedProducts[index].quantity = quantity;\n    setProducts(updatedProducts);\n  };\n\n  // 주문 제출 함수\n  const submitOrder = async () => {\n    try {\n      const orderDetails = {\n        ...orderInfo,\n        products: products.map(({ id, quantity }) => ({\n          productId: id,\n          quantity,\n        })),\n      };\n      const response = await axios.post(`${API_URL}/orders`, orderDetails);\n      if (response.status === 200) {\n        setPaymentResult(\"주문이 성공적으로 처리되었습니다.\");\n      } else {\n        setPaymentResult(\"주문 처리 중 오류가 발생했습니다.\");\n      }\n    } catch (error) {\n      console.error(\"주문 처리 중 오류가 발생했습니다.\", error);\n      setPaymentResult(\"주문 처리 중 오류가 발생했습니다.\");\n    }\n  };\n\n  return (\n    <div className=\"app\">\n      {/* 배송 정보 입력 폼 */}\n      {/* 상품 목록 및 구매 정보 */}\n      <div className=\"order-form\">\n        {/* 기존 배송 정보 입력 폼 및 상품 목록 렌더링 코드 */}\n        <h3>상품 목록</h3>\n        {products.map((product, index) => (\n          <div key={index} className=\"product\">\n            <h4>\n              {product.name} - {product.price}원\n            </h4>\n            <p>\n              수량:{\" \"}\n              <input\n                type=\"number\"\n                value={product.quantity}\n                onChange={(e) =>\n                  handleProductQuantityChange(index, e.target.value)\n                }\n              />\n            </p>\n          </div>\n        ))}\n      </div>\n      <div className=\"payment-button\">\n        <button onClick={submitOrder}>주문하기</button>\n      </div>\n      {paymentResult && <p>{paymentResult}</p>}\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}